{"version":3,"sources":["Components/Display.js","Components/Subtask/Subtask2.js","Components/Subtask/Subtask.js","Components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["makeStyles","theme","root","display","flexWrap","paper","width","spacing","marginTop","background","margin","position","left","top","transform","input","marginLeft","input2","add","green","backgroundColor","subAdd","add2","radius","Subtask2","props","React","useState","checked","setChecked","FormControlLabel","control","Checkbox","onChange","e","target","inputProps","size","label","subElement","useStyles","subTask","subPaper","height","expansion","noExpansionItem","check","Subtask","classes","setSubTask","subTasks","ele","element","needSubtask","ExpansionPanel","className","ExpansionPanelSummary","expandIcon","aria-label","aria-controls","id","expansionCheckbox","onClick","event","stopPropagation","onFocus","TextField","value","autoComplete","IconButton","color","push","fontSize","ExpansionPanelDetails","Typography","map","index","key","Paper","elevation","name","Alert","variant","progressIndicator","Home","task","setTask","tasks","setTasks","openAddSnackbar","setOpenAddSnackbar","openDelSnackbar","setOpenDelSnackbar","handleCloseAddSnackbar","reason","handleCloseDelSnackbar","Container","maxWidth","Button","dict","taskValue","checkValue","List","ListItem","updatedTasks","splice","console","log","handleDel","Snackbar","open","autoHideDuration","onClose","severity","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4fb43a51.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { green } from \"@material-ui/core/colors\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\n\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\nimport AddCircleSharpIcon from \"@material-ui/icons/AddCircleSharp\";\r\n\r\nimport \"./Display.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  paper: {\r\n    width: theme.spacing(55),\r\n    // height: theme.spacing(75),\r\n    marginTop: 20,\r\n\r\n    background: \"#EBFF57\",\r\n    margin: theme.spacing(2),\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    top: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n  },\r\n  input: {\r\n    width: 300,\r\n    marginTop: 20,\r\n    marginLeft: 30,\r\n  },\r\n  input2: {\r\n    width: 300,\r\n    marginLeft: 30,\r\n  },\r\n  add: {\r\n    marginTop: 30,\r\n    marginLeft: 10,\r\n    background: green[400],\r\n    \"&:hover\": {\r\n      backgroundColor: green[500],\r\n    },\r\n    subAdd: {\r\n      marginTop: 30,\r\n      marginLeft: 10,\r\n    },\r\n  },\r\n  add2: {\r\n    radius: 50,\r\n  },\r\n}));\r\n\r\nconst Display = () => {\r\n  const classes = useStyles();\r\n  const [task, setTask] = useState(\"\");\r\n  const [tasks, setTasks] = useState([]);\r\n  const [subTask, setSubTask] = useState(\"\");\r\n  const [subTasks, setSubTasks] = useState([]);\r\n\r\n  const handleTask = (e) => {\r\n    setTask(e.target.value);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    tasks.push(task);\r\n    setTask(\"\");\r\n  };\r\n  const handleSubTask = (e) => {\r\n    setSubTask(e.target.value);\r\n  };\r\n\r\n  const handleSubAdd = () => {\r\n    subTasks.push(subTask);\r\n    setSubTask(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"display\">\r\n      <div className={classes.root}>\r\n        <Paper className={classes.paper} elevation={5}>\r\n          <TextField\r\n            id=\"standard-basic\"\r\n            label=\"Enter the Task\"\r\n            size=\"small\"\r\n            className={classes.input}\r\n            onChange={handleTask}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            className={classes.add}\r\n            onClick={handleAdd}\r\n          >\r\n            ADD\r\n          </Button>\r\n\r\n          <div>\r\n            <List>\r\n              {tasks.map((ele, index) => (\r\n                <ListItem key={index}>\r\n                  <ExpansionPanel>\r\n                    <ExpansionPanelSummary\r\n                      expandIcon={<ExpandMoreIcon />}\r\n                      aria-label=\"Expand\"\r\n                      aria-controls=\"additional-actions1-content\"\r\n                      id=\"additional-actions1-header\"\r\n                    >\r\n                      <FormControlLabel\r\n                        aria-label=\"Acknowledge\"\r\n                        onClick={(event) => event.stopPropagation()}\r\n                        onFocus={(event) => event.stopPropagation()}\r\n                        control={<Checkbox />}\r\n                        label={ele}\r\n                      />\r\n                    </ExpansionPanelSummary>\r\n                    <TextField\r\n                      id=\"standard-basic\"\r\n                      label=\"Enter the Sub Task\"\r\n                      size=\"small\"\r\n                      className={classes.input2}\r\n                      onChange={handleSubTask}\r\n                    />\r\n\r\n                    <IconButton color=\"secondary\" aria-label=\"add an alarm\">\r\n                      <AddCircleSharpIcon\r\n                        fontSize=\"large\"\r\n                        onClick={handleSubAdd}\r\n                      />\r\n                    </IconButton>\r\n\r\n                    <ExpansionPanelDetails>\r\n                      <Typography color=\"textSecondary\">\r\n                        {subTasks.map((ele, index) => (\r\n                          <li key={index}>{ele}</li>\r\n                        ))}\r\n                      </Typography>\r\n                    </ExpansionPanelDetails>\r\n                  </ExpansionPanel>\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </div>\r\n        </Paper>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n","import React, { useState } from \"react\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nconst Subtask2 = (props) => {\r\n  const [checked, setChecked] = React.useState(false);\r\n  const handleCheck = (e) => {\r\n    setChecked(e.target.checked);\r\n  };\r\n  return (\r\n    <>\r\n      <FormControlLabel\r\n        control={\r\n          <Checkbox\r\n            checked={checked}\r\n            onChange={handleCheck}\r\n            inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n            size=\"small\"\r\n          />\r\n        }\r\n        label={props.subElement}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Subtask2;\r\n","import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { green } from \"@material-ui/core/colors\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\nimport AddCircleSharpIcon from \"@material-ui/icons/AddCircleSharp\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Subtask2 from \"./Subtask2\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  subTask: {\r\n    marginLeft: 30,\r\n  },\r\n\r\n  input2: {\r\n    width: 300,\r\n    marginLeft: 30,\r\n  },\r\n\r\n  add2: {\r\n    radius: 50,\r\n  },\r\n\r\n  subPaper: {\r\n    width: theme.spacing(50),\r\n    height: theme.spacing(8),\r\n  },\r\n\r\n  expansion: {\r\n    width: theme.spacing(50),\r\n  },\r\n  noExpansionItem: {\r\n    marginLeft: 50,\r\n  },\r\n\r\n  check: {\r\n    marginLeft: 6.5,\r\n    marginTop: 10,\r\n  },\r\n}));\r\n\r\nconst Subtask = (props) => {\r\n  const classes = useStyles();\r\n  const [subTask, setSubTask] = useState(\"\");\r\n  const [subTasks, setSubTasks] = useState([]);\r\n  const [checked, setChecked] = React.useState(false);\r\n\r\n  const ele = props.element;\r\n  const handleSubTask = (e) => {\r\n    setSubTask(e.target.value);\r\n  };\r\n\r\n  const handleSubAdd = () => {\r\n    subTasks.push(subTask);\r\n    setSubTask(\"\");\r\n  };\r\n  const handleCheck = (e) => {\r\n    setChecked(e.target.checked);\r\n  };\r\n\r\n  const handleSubDel = (e) => {\r\n    // subTasks.splice(e.target.value, 1);\r\n    console.log(e.target.value);\r\n  };\r\n  if (props.needSubtask) {\r\n    return (\r\n      <>\r\n        <div>\r\n          <ExpansionPanel className={classes.expansion}>\r\n            <ExpansionPanelSummary\r\n              expandIcon={<ExpandMoreIcon />}\r\n              aria-label=\"Expand\"\r\n              aria-controls=\"additional-actions1-content\"\r\n              id=\"additional-actions1-header\"\r\n            >\r\n              <FormControlLabel\r\n                className={classes.expansionCheckbox}\r\n                aria-label=\"Acknowledge\"\r\n                onClick={(event) => event.stopPropagation()}\r\n                onFocus={(event) => event.stopPropagation()}\r\n                control={<Checkbox />}\r\n                label={ele}\r\n              />\r\n            </ExpansionPanelSummary>\r\n            <TextField\r\n              id=\"standard-basic\"\r\n              label=\"Enter the Sub Task\"\r\n              size=\"small\"\r\n              className={classes.input2}\r\n              value={subTask}\r\n              onChange={handleSubTask}\r\n              autoComplete=\"off\"\r\n            />\r\n\r\n            <IconButton\r\n              color=\"secondary\"\r\n              aria-label=\"add an alarm\"\r\n              onClick={handleSubAdd}\r\n            >\r\n              <AddCircleSharpIcon fontSize=\"large\" />\r\n            </IconButton>\r\n\r\n            <ExpansionPanelDetails>\r\n              <Typography color=\"textSecondary\" className={classes.subTask}>\r\n                {subTasks.map((ele, index) => (\r\n                  <>\r\n                    <Subtask2 key={index} subElement={ele} />\r\n                  </>\r\n                ))}\r\n              </Typography>\r\n            </ExpansionPanelDetails>\r\n          </ExpansionPanel>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      <Paper className={classes.subPaper} elevation={2}>\r\n        <FormControlLabel\r\n          className={classes.check}\r\n          control={\r\n            <Checkbox checked={checked} onChange={handleCheck} name=\"check\" />\r\n          }\r\n          label={props.element}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Subtask;\r\n","import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { green } from \"@material-ui/core/colors\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\nimport AddCircleSharpIcon from \"@material-ui/icons/AddCircleSharp\";\r\nimport Subtask from \"../Subtask/Subtask\";\r\nimport \"./Home.css\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\n// import { MuiAlert } from \"@material-ui/lab\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  paper: {\r\n    width: theme.spacing(71),\r\n    marginTop: 20,\r\n\r\n    background: \"#EBFF57\",\r\n    margin: theme.spacing(2),\r\n  },\r\n  input: {\r\n    width: 312,\r\n    marginTop: 20,\r\n    marginLeft: 30,\r\n  },\r\n\r\n  add: {\r\n    marginTop: 30,\r\n    marginLeft: 10,\r\n    background: green[400],\r\n    \"&:hover\": {\r\n      backgroundColor: green[500],\r\n    },\r\n  },\r\n\r\n  check: {\r\n    marginTop: 30,\r\n    marginLeft: 10,\r\n  },\r\n  progressIndicator: {\r\n    marginTop: 30,\r\n    // marginLeft: 10,\r\n  },\r\n}));\r\n\r\nconst Home = () => {\r\n  const classes = useStyles();\r\n  const [task, setTask] = useState(\"\");\r\n  const [tasks, setTasks] = useState([]);\r\n  const [checked, setChecked] = React.useState(false);\r\n  const [openAddSnackbar, setOpenAddSnackbar] = React.useState(false);\r\n  const [openDelSnackbar, setOpenDelSnackbar] = React.useState(false);\r\n\r\n  const handleTask = (e) => {\r\n    setTask(e.target.value);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    const dict = { taskValue: task, checkValue: checked };\r\n    tasks.push(dict);\r\n    setOpenDelSnackbar(false);\r\n    setOpenAddSnackbar(true);\r\n    setTask(\"\");\r\n  };\r\n\r\n  const handleDel = (id) => {\r\n    // let updatedTasks = tasks.splice(id, 1);\r\n    let updatedTasks = [...tasks];\r\n    updatedTasks.splice(id, 1);\r\n    setTasks(updatedTasks);\r\n    setOpenAddSnackbar(false);\r\n    setOpenDelSnackbar(true);\r\n    console.log(id);\r\n  };\r\n  const handleCloseAddSnackbar = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpenAddSnackbar(false);\r\n  };\r\n\r\n  const handleCloseDelSnackbar = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpenDelSnackbar(false);\r\n  };\r\n\r\n  const handleCheck = (e) => {\r\n    setChecked(e.target.checked);\r\n  };\r\n\r\n  const handleSubDel = (e) => {\r\n    // subTasks.splice(e.target.value, 1);\r\n    console.log(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <div className={classes.root}>\r\n        <Container maxWidth=\"sm\">\r\n          <Paper className={classes.paper} elevation={5}>\r\n            <TextField\r\n              id=\"standard-basic\"\r\n              label=\"Enter the Task\"\r\n              size=\"small\"\r\n              className={classes.input}\r\n              onChange={handleTask}\r\n              value={task}\r\n              autoComplete=\"off\"\r\n            />\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              className={classes.add}\r\n              onClick={handleAdd}\r\n            >\r\n              ADD\r\n            </Button>\r\n\r\n            <FormControlLabel\r\n              className={classes.check}\r\n              control={\r\n                <Checkbox\r\n                  checked={checked}\r\n                  onChange={handleCheck}\r\n                  inputProps={{ \"aria-label\": \"primary checkbox\" }}\r\n                />\r\n              }\r\n              label=\"SubTasks\"\r\n            />\r\n\r\n            <div>\r\n              <List>\r\n                {tasks.map((ele, index) => (\r\n                  <ListItem key={index}>\r\n                    <Subtask\r\n                      element={ele.taskValue}\r\n                      needSubtask={ele.checkValue}\r\n                    />\r\n                    <IconButton\r\n                      aria-label=\"delete\"\r\n                      onClick={() => handleDel(index)}\r\n                    >\r\n                      <DeleteIcon fontSize=\"large\" />\r\n                    </IconButton>\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            </div>\r\n          </Paper>\r\n          <Snackbar\r\n            open={openAddSnackbar}\r\n            autoHideDuration={6000}\r\n            onClose={handleCloseAddSnackbar}\r\n          >\r\n            <Alert onClose={handleCloseAddSnackbar} severity=\"success\">\r\n              A New Task is Added!\r\n            </Alert>\r\n          </Snackbar>\r\n\r\n          <Snackbar\r\n            open={openDelSnackbar}\r\n            autoHideDuration={6000}\r\n            onClose={handleCloseDelSnackbar}\r\n          >\r\n            <Alert onClose={handleCloseDelSnackbar} severity=\"error\">\r\n              A Task is Deleted!\r\n            </Alert>\r\n          </Snackbar>\r\n        </Container>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport Display from \"./Components/Display\";\nimport Home from \"./Components/Home/Home\";\n\nconst App = () => {\n  return (\n    <div>\n      <Home />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}